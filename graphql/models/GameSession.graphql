extend type Query {
    gameSessions: [GameSession!]! @all
    gameSession(id: ID!): GameSession! @find
}

extend type Mutation {
    createGameSession(memoTestId: ID! @spread): GameSession! @field(resolver: "App\\Http\\GraphQL\\Mutations\\GameSession\\CreateGameSession")
    endGameSession(endSessionData: EndSessionInput!): GameSession! @field(resolver: "App\\Http\\GraphQL\\Mutations\\GameSession\\EndGameSession")
    deleteGameSession(id: ID!): GameSession! @delete
}

type GameSession {
    id: ID!
    memoTest: MemoTest! @belongsTo
    retries: Int!
    number_of_pairs: Int!
    state: GameState!
    score: Float!
    created_at: DateTime!
    updated_at: DateTime!
}

enum GameState {
    CREATED
    COMPLETED
}

input EndSessionInput {
    id: ID!
    retries: Int
}